plugins {
	id 'org.jetbrains.kotlin.jvm' version '1.9.23'
	id 'org.jetbrains.kotlin.plugin.spring' version '1.9.23'
	id 'org.springframework.boot' version '3.4.4'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'org.jetbrains.kotlin.plugin.jpa' version '1.9.23'
	id 'com.diffplug.spotless' version '7.0.2'
	id 'io.gitlab.arturbosch.detekt' version '1.23.6'
	id 'com.google.cloud.tools.jib' version '3.4.5'
	id 'com.gorylenko.gradle-git-properties' version '2.5.0'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

def isCI = System.getenv('CI') == 'true'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

repositories {
	mavenCentral()
	maven {
		name = "GithubPackage"
		url = uri("https://maven.pkg.github.com/ablil/detekt-extension")
		credentials {
			username = project.findProperty("gpr.username") as String ?: System.getenv('GITHUB_ACTOR')
			password = project.findProperty("gpr.password") as String ?: System.getenv('GITHUB_TOKEN')
		}
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-mail'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
	implementation 'org.jetbrains.kotlin:kotlin-reflect'
	implementation 'org.apache.commons:commons-lang3:3.17.0'
	runtimeOnly 'org.postgresql:postgresql'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.jetbrains.kotlin:kotlin-test-junit5'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	testRuntimeOnly 'com.h2database:h2'
	detektPlugins('com.github.ablil.detekt:detekt-custom-rule:0.0.1')
}

kotlin {
	compilerOptions {
		freeCompilerArgs.addAll '-Xjsr305=strict'
	}
}

spotless {
	kotlin {
		toggleOffOn()
		ktfmt('0.54').kotlinlangStyle()
	}
}

build {
	if (isCI) {
		dependsOn(tasks.jib)
	}
}

jib {
	to {
		image = isCI ? "ghcr.io/ablil/spring-starter-template" : "spring-starter-template"
	}
    container {
        creationTime = 'USE_CURRENT_TIMESTAMP'
        ports = ['8080']
    }
}

allOpen {
	annotation 'jakarta.persistence.Entity'
	annotation 'jakarta.persistence.MappedSuperclass'
	annotation 'jakarta.persistence.Embeddable'
}

test {
	systemProperty 'spring.profiles.active', 'test'
	useJUnitPlatform()
}

springBoot {
	buildInfo()
}